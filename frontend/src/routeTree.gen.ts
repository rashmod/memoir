/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UploadImport } from './routes/upload'
import { Route as IndexImport } from './routes/index'
import { Route as VideosIndexImport } from './routes/videos/index'
import { Route as VideosIdImport } from './routes/videos/$id'

// Create/Update Routes

const UploadRoute = UploadImport.update({
  path: '/upload',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VideosIndexRoute = VideosIndexImport.update({
  path: '/videos/',
  getParentRoute: () => rootRoute,
} as any)

const VideosIdRoute = VideosIdImport.update({
  path: '/videos/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/upload': {
      id: '/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadImport
      parentRoute: typeof rootRoute
    }
    '/videos/$id': {
      id: '/videos/$id'
      path: '/videos/$id'
      fullPath: '/videos/$id'
      preLoaderRoute: typeof VideosIdImport
      parentRoute: typeof rootRoute
    }
    '/videos/': {
      id: '/videos/'
      path: '/videos'
      fullPath: '/videos'
      preLoaderRoute: typeof VideosIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/upload': typeof UploadRoute
  '/videos/$id': typeof VideosIdRoute
  '/videos': typeof VideosIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/upload': typeof UploadRoute
  '/videos/$id': typeof VideosIdRoute
  '/videos': typeof VideosIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/upload': typeof UploadRoute
  '/videos/$id': typeof VideosIdRoute
  '/videos/': typeof VideosIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/upload' | '/videos/$id' | '/videos'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/upload' | '/videos/$id' | '/videos'
  id: '__root__' | '/' | '/upload' | '/videos/$id' | '/videos/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UploadRoute: typeof UploadRoute
  VideosIdRoute: typeof VideosIdRoute
  VideosIndexRoute: typeof VideosIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UploadRoute: UploadRoute,
  VideosIdRoute: VideosIdRoute,
  VideosIndexRoute: VideosIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/upload",
        "/videos/$id",
        "/videos/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/upload": {
      "filePath": "upload.tsx"
    },
    "/videos/$id": {
      "filePath": "videos/$id.tsx"
    },
    "/videos/": {
      "filePath": "videos/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
